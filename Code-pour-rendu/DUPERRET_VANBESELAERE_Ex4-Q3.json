{
"editor" : ".pos 0\nirmovl stack,%esp\n\nmain :  mrmovl limite, %eax         #Limite\n        pushl %eax\n\n        irmovl t, %eax              #Source\n        pushl %eax\n        \n        irmovl r, %eax              #Destination\n        pushl %eax\n        \n        call strcpy                 #Test premier cas\n        call strcpy_bis             #Test deuxième cas\n        iaddl 12, %esp\n        halt\n\n\nstrcpy: mrmovl 4(%esp),%edi         #Test premier cas\n        mrmovl 8(%esp),%esi\n        mrmovl 12(%esp),%ecx\n        \nboucle: lodsl %eax\n        stosl %eax\n        isubl 0, %eax               #On vérifie si le tableau est vide\n        jne nonvide                 #Si le tableau n'est pas encore vide\n        rmmovl %eax,-4(%edi)        #Si le tableau est vide, on ajoute un 0 à la suite de notre tableau de destination\n        \nnonvide:loopne boucle\n        ret\n        \n        \nstrcpy_bis: irmovl b, %esi          #Test deuxième cas\n            mrmovl 4(%esp),%edi\n            mrmovl 12(%esp),%ecx\n            jmp boucle              #On renvoie à notre boucle avec notre deuxième tableau\n\n        \n.pos 0x100\nlimite:  .long 4                    #Limite\n\nt:  .long 2                         #Tableau premier cas\n    .long 3\n    \n.pos 0x120    \nb:  .long 2                         #Tableau deuxième cas\n    .long 3\n    .long 5\n    .long 7\n    .long 11\nr:                                  #Destination\n\n.pos 0x200\nstack:  .long 0\n\n",
"machineState" : {
"kernel" : "0",
"compilationResult" : {"output":"  0x0000:                |  |  .pos 0 \n  0x0000: 30f400020000   |  |      irmovl stack,%esp \n                         |  |  \n  0x0006: 410f00010000   |  |  main:      mrmovl limite,%eax #Limite\n  0x000c: a00f           |  |      pushl %eax \n                         |  |  \n  0x000e: 30f004010000   |  |      irmovl t,%eax #Source\n  0x0014: a00f           |  |      pushl %eax \n                         |  |  \n  0x0016: 30f034010000   |  |      irmovl r,%eax #Destination\n  0x001c: a00f           |  |      pushl %eax \n                         |  |  \n  0x001e: 802f000000     |  |      call strcpy #Test premier cas\n  0x0023: 805c000000     |  |      call strcpy_bis #Test deuxième cas\n  0x0028: c0f40c000000   |  |      iaddl 12,%esp \n  0x002e: 10             |  |      halt  \n                         |  |  \n                         |  |  \n  0x002f: 417404000000   |  |  strcpy:      mrmovl 4(%esp),%edi #Test premier cas\n  0x0035: 416408000000   |  |      mrmovl 8(%esp),%esi \n  0x003b: 41140c000000   |  |      mrmovl 12(%esp),%ecx \n                         |  |  \n  0x0041: e00f           |  |  boucle:      lodsl %eax \n  0x0043: e10f           |  |      stosl %eax \n  0x0045: c1f000000000   |  |      isubl 0,%eax #On vérifie si le tableau est vide\n  0x004b: 7456000000     |  |      jne nonvide #Si le tableau n'est pas encore vide\n  0x0050: 4007fcffffff   |  |      rmmovl %eax,-4(%edi) #Si le tableau est vide, on ajoute un 0 à la suite de notre tableau de destination\n                         |  |  \n  0x0056: f441000000     |  |  nonvide:      loopne boucle \n  0x005b: 90             |  |      ret  \n                         |  |  \n                         |  |  \n  0x005c: 30f620010000   |  |  strcpy_bis:      irmovl b,%esi #Test deuxième cas\n  0x0062: 417404000000   |  |      mrmovl 4(%esp),%edi \n  0x0068: 41140c000000   |  |      mrmovl 12(%esp),%ecx \n  0x006e: 7041000000     |  |      jmp boucle #On renvoie à notre boucle avec notre deuxième tableau\n                         |  |  \n                         |  |  \n  0x0073:                |  |  .pos 0x100 \n  0x0100: 04000000       |  |  limite:  .long 4 #Limite\n                         |  |  \n  0x0104: 02000000       |  |  t:  .long 2 #Tableau premier cas\n  0x0108: 03000000       |  |  .long 3 \n                         |  |  \n  0x010c:                |  |  .pos 0x120 \n  0x0120: 02000000       |  |  b:  .long 2 #Tableau deuxième cas\n  0x0124: 03000000       |  |  .long 3 \n  0x0128: 05000000       |  |  .long 5 \n  0x012c: 07000000       |  |  .long 7 \n  0x0130: 0b000000       |  |  .long 11 \n  0x0134:                |  |  r:  #Destination\n                         |  |  \n  0x0134:                |  |  .pos 0x200 \n  0x0200: 00000000       |  |  stack:  .long 0 \n                         |  |  \n","errors":[],"data":{"_labelToPC":{},"_lineNumberToPc":{},"_pcToLineNumber":{}}},
"cpuState" : {"pc":46,"valP":47,"icode":1,"ifun":0,"ra":15,"rb":15,"valC":0,"valA":0,"valB":0,"srcA":15,"srcB":15,"dstE":15,"dstM":15,"aluA":0,"aluB":0,"valE":0,"cc":0,"bcond":false,"mem_addr":0,"mem_data":0,"mem_read":false,"mem_write":false,"valM":0,"newPC":47},
"registers" : [{"name":"%eax","value_hex":"00000007","value_dec":7},{"name":"%ebx","value_hex":"00000000","value_dec":0},{"name":"%ecx","value_hex":"00000000","value_dec":0},{"name":"%edx","value_hex":"00000000","value_dec":0},{"name":"%esi","value_hex":"00000130","value_dec":304},{"name":"%edi","value_hex":"00000144","value_dec":324},{"name":"%ebp","value_hex":"00000000","value_dec":0},{"name":"%esp","value_hex":"00000200","value_dec":512}],
"flags" : [{"name":"ZF","value":"0"},{"name":"OF","value":"0"},{"name":"SF","value":"0"}],
"status" : [{"name":"STAT","value":"HALT"},{"name":"ERR","value":""},{"name":"PC","value":"0000002e"}],
"performance" : [],
"memory" : {"wordSize":4,"startAddress":0,"maxAddress":8192,"words":[{"address":"01fc","value":"04000000"},{"address":"01f8","value":"04010000"},{"address":"01f4","value":"34010000"},{"address":"01f0","value":"28000000"},{"address":"0134","value":"02000000"},{"address":"0138","value":"03000000"},{"address":"013c","value":"05000000"},{"address":"0140","value":"07000000"}]}
},
"instructionSet" : [
  {
    "name": "nop",
    "icode": 0,
    "ifun": 0,
    "args": ""
  },
  {
    "name": "halt",
    "icode": 1,
    "ifun": 0,
    "args": ""
  },
  {
    "name": "rrmovl",
    "icode": 2,
    "ifun": 0,
    "args": "rA,rB"
  },
  {
    "name": "irmovl",
    "icode": 3,
    "ifun": 0,
    "args": "valC,rB"
  },
  {
    "name": "rmmovl",
    "icode": 4,
    "ifun": 0,
    "args": "rA,valC?(rB)"
  },
  {
    "name": "rmmovl",
    "icode": 4,
    "ifun": 0,
    "args": "rA,valC"
  },
  {
    "name": "mrmovl",
    "icode": 4,
    "ifun": 1,
    "args": "valC?(rB),rA"
  },
  {
    "name": "mrmovl",
    "icode": 4,
    "ifun": 1,
    "args": "valC,rA"
  },
  {
    "name": "addl",
    "icode": 6,
    "ifun": 0,
    "args": "rA,rB"
  },
  {
    "name": "subl",
    "icode": 6,
    "ifun": 1,
    "args": "rA,rB"
  },
  {
    "name": "andl",
    "icode": 6,
    "ifun": 2,
    "args": "rA,rB"
  },
  {
    "name": "xorl",
    "icode": 6,
    "ifun": 3,
    "args": "rA,rB"
  },
  {
    "name": "sall",
    "icode": 6,
    "ifun": 4,
    "args": "rA,rB"
  },
  {
    "name": "sarl",
    "icode": 6,
    "ifun": 5,
    "args": "rA,rB"
  },
  {
    "name": "jmp",
    "icode": 7,
    "ifun": 0,
    "args": "valC"
  },
  {
    "name": "jle",
    "icode": 7,
    "ifun": 1,
    "args": "valC"
  },
  {
    "name": "jl",
    "icode": 7,
    "ifun": 2,
    "args": "valC"
  },
  {
    "name": "je",
    "icode": 7,
    "ifun": 3,
    "args": "valC"
  },
  {
    "name": "jne",
    "icode": 7,
    "ifun": 4,
    "args": "valC"
  },
  {
    "name": "jge",
    "icode": 7,
    "ifun": 5,
    "args": "valC"
  },
  {
    "name": "jg",
    "icode": 7,
    "ifun": 6,
    "args": "valC"
  },
  {
    "name": "call",
    "icode": 8,
    "ifun": 0,
    "args": "valC"
  },
  {
    "name": "ret",
    "icode": 9,
    "ifun": 0,
    "args": ""
  },
  {
    "name": "pushl",
    "icode": 10,
    "ifun": 0,
    "args": "rA"
  },
  {
    "name": "popl",
    "icode": 11,
    "ifun": 0,
    "args": "rA"
  },
  {
    "name": "iaddl",
    "icode": 12,
    "ifun": 0,
    "args": "valC,rB"
  },
  {
    "name": "isubl",
    "icode": 12,
    "ifun": 1,
    "args": "valC,rB"
  },
  {
    "name": "iandl",
    "icode": 12,
    "ifun": 2,
    "args": "valC,rB"
  },
  {
    "name": "ixorl",
    "icode": 12,
    "ifun": 3,
    "args": "valC,rB"
  },
  {
    "name": "isall",
    "icode": 12,
    "ifun": 4,
    "args": "valC,rB"
  },
  {
    "name": "isarl",
    "icode": 12,
    "ifun": 5,
    "args": "valC,rB"
  },
  {
    "name": "decl",
    "icode": 13,
    "ifun": 1,
    "args": "rA"
  },
  {
    "name": "ncall",
    "icode": 10,
    "ifun": 1,
    "args": "valC"
  },
  {
    "name": "nret",
    "icode": 11,
    "ifun": 1,
    "args": ""
  },
  {
    "name": "lodsl",
    "icode": 14,
    "ifun": 0,
    "args": "rA"
  },
  {
    "name": "stosl",
    "icode": 14,
    "ifun": 1,
    "args": "rA"
  },
  {
    "name": "loop",
    "icode": 15,
    "ifun": 0,
    "args": "valC"
  },
  {
    "name": "loope",
    "icode": 15,
    "ifun": 3,
    "args": "valC"
  },
  {
    "name": "loopne",
    "icode": 15,
    "ifun": 4,
    "args": "valC"
  }
],
"hcl" : "####################################################################\n#  HCL Description of control for single-cycle y86 processor \"Seq\" #\n#                                                                  #\n#  Original (C) Randal E. BRYANT, David R. O'HALLARON, 2002        #\n#  Updates  (C) Alexis BANDET, Valentin GAISSET, Romain GUISSET,   #\n#               Florian SIMBA, 2020                                #\n#  Updates  (C) El Hadji Pathe FALL, Nicolas MARIN PACHE, Corentin #\n#               MERCIER, Benjamin MORO, Nathan PRECIGOUT, 2021     #\n####################################################################\n\n## Symbolic representation of y86 instruction codes ################\n\nintsig NOP                      'instructionSet.get(\"nop\").icode'\nintsig HALT                     'instructionSet.get(\"halt\").icode'\nintsig RRMOVL                   'instructionSet.get(\"rrmovl\").icode'\nintsig IRMOVL                   'instructionSet.get(\"irmovl\").icode'\nintsig RMMOVL                   'instructionSet.get(\"rmmovl\").icode'\nintsig MRMOVL                   'instructionSet.get(\"rmmovl\").icode'\nintsig OPL                      'instructionSet.get(\"addl\").icode'\nintsig IOPL                     'instructionSet.get(\"iaddl\").icode'\nintsig JXX                      'instructionSet.get(\"jmp\").icode'\nintsig CALL                     'instructionSet.get(\"call\").icode'\nintsig RET                      'instructionSet.get(\"ret\").icode'\nintsig PUSHL                    'instructionSet.get(\"pushl\").icode'\nintsig POPL                     'instructionSet.get(\"popl\").icode'\nintsig STRGL                    'instructionSet.get(\"lodsl\").icode'\nintsig LOOP                     'instructionSet.get(\"loop\").icode'\n\n## Symbolic representation of y86 registers referenced explicitly ##\n\nintsig REDI                     'registers.edi'         \nintsig RECX                     'registers.ecx'         \nintsig RESP                     'registers.esp'         \nintsig RESI                     'registers.esi'         \nintsig REAX                     'registers.eax'         \nintsig REBP                     'registers.ebp'         # Frame Pointer\nintsig RNONE                    'registers.none'        # Special value indicating \"no register\"\n\n## ALU functions referenced explicitly #############################\n\nintsig ALUADD                   'alufct.A_ADD'          # ALU should add its arguments\n\n## Signals that can be referenced by control logic #################\n\n## Fetch stage inputs\nintsig pc                       'ctx.pc'                # Program counter\n\n## Fetch stage computations\nintsig icode                    'ctx.icode'             # Instruction control code\nintsig ifun                     'ctx.ifun'              # Instruction function\nintsig rA                       'ctx.ra'                # rA field from instruction\nintsig rB                       'ctx.rb'                # rB field from instruction\nintsig valC                     'ctx.valC'              # Constant from instruction\nintsig valP                     'ctx.valP'              # Address of following instruction\n\n## Decode stage computations\nintsig valA                     'ctx.valA'              # Value from register A port\nintsig valB                     'ctx.valB'              # Value from register B port\n\n## Execute stage computations\nintsig valE                     'ctx.valE'              # Value computed by ALU\nboolsig Bch                     'ctx.bcond'             # Branch test\n\n## Memory stage computations\nintsig valM                     'ctx.valM'              # Value read from memory\n\n####################################################################\n#    Control Signal Definitions.                                   #\n####################################################################\n\n## Fetch stage #####################################################\n\n## Does fetched instruction require a register numbers byte?\nbool need_regids =\n    icode in { RRMOVL, OPL, IOPL, PUSHL, POPL, IRMOVL, RMMOVL, STRGL };\n\n## Does fetched instruction require a constant word?\nbool need_valC =\n    icode in { IRMOVL, RMMOVL, JXX, CALL, IOPL, LOOP };\n\n## Is instruction valid?\nbool instr_valid =\n    icode in { NOP, HALT, RRMOVL, IRMOVL, RMMOVL,\n               OPL, IOPL, JXX, CALL, RET, PUSHL, POPL, STRGL, LOOP };\n\n## Decode stage ####################################################\n\n## What register should be used as the A source?\nint srcA = [\n    icode in { RRMOVL, RMMOVL, OPL, PUSHL } : rA;\n    icode in { POPL, RET } : RESP;\n    icode == STRGL && ifun == 0 : RESI;\n    icode == STRGL && ifun == 1 : REAX;\n    1 : RNONE;  # Don't need register for reading\n];\n\n## What register should be used as the B source?\nint srcB = [\n    icode in { OPL, IOPL, RMMOVL } : rB;\n    icode in { PUSHL, POPL, CALL, RET } : RESP;\n    icode == STRGL && ifun == 0 : RESI;\n    icode == STRGL && ifun == 1 : REDI;\n    icode in { LOOP } : RECX;\n    1 : RNONE;  # Don't need register for reading\n];\n\n## What register should be used as the E destination?\nint dstE = [\n    icode in { RRMOVL, IRMOVL, OPL, IOPL } : rB;\n    icode in { PUSHL, POPL, CALL, RET } : RESP;\n    icode == STRGL && ifun == 0 : RESI;\n    icode == STRGL && ifun == 1 : REDI;\n    icode in { LOOP } : RECX;\n    1 : RNONE;  # Don't need register for writing\n];\n\n## What register should be used as the M destination?\nint dstM = [\n    icode in { POPL } || icode == RMMOVL && ifun == 1 : rA;\n    icode == STRGL && ifun == 0 : REAX;\n    1 : RNONE;  # Don't need register for writing\n];\n\n## Execute stage ###################################################\n\n## Select input A to ALU\nint aluA = [\n    icode in { RRMOVL, OPL } : valA;\n    icode in { IRMOVL, RMMOVL, IOPL } : valC;\n    icode in { CALL, PUSHL } : -4;\n    icode in { RET, POPL, STRGL } : 4;\n    icode in { LOOP } : -1;\n    # Other instructions don't need ALU\n];\n\n## Select input B to ALU\nint aluB = [\n    icode in { RMMOVL, OPL, IOPL, CALL, PUSHL, RET, POPL, STRGL, LOOP } : valB;\n    icode in { RRMOVL, IRMOVL } : 0;\n    # Other instructions don't need ALU\n];\n\n## Set ALU function\nint alufun = [\n    icode in { OPL, IOPL } : ifun;\n    1 : ALUADD;  # Perform additions by default\n];\n\n## Should condition codes be updated?\nbool set_cc = icode in { OPL, IOPL, LOOP };\n\nbool is_bch = icode in { JXX, LOOP };\n\n## Memory stage ####################################################\n\n## Set read control signal\nbool mem_read =\n    icode in { POPL, RET } || icode == STRGL && ifun == 0 || icode == RMMOVL && ifun == 1;\n\n## Set write control signal\nbool mem_write =\n    icode in { RMMOVL, PUSHL, CALL } || icode == STRGL && ifun == 1;\n\n## Select memory address\nint mem_addr = [\n    icode in { RMMOVL, PUSHL, CALL } : valE;\n    icode in { POPL, RET } || icode == STRGL && ifun == 0 : valA;\n    icode == STRGL && ifun == 1 : valB;\n    # Other instructions don't need address\n];\n\n## Select memory input data\nint mem_data = [\n    # Value from register\n    icode in { RMMOVL, PUSHL } || icode == STRGL && ifun == 1 : valA;\n    # Return PC address\n    icode == CALL : valP;\n    # Default: Don't write anything\n];\n\n## Program Counter update ##########################################\n\n## Compute address of next instruction to be fetched\nint new_pc = [\n    # Call: Use immediate value\n    icode == CALL : valC;\n    # Taken branch:  Use immediate value\n    icode in { JXX } && Bch : valC;\n    icode in { LOOP } && Bch : valC;\n    # Completion of RET instruction: Use value retrieved from stack\n    icode == RET : valM;\n    # Default: Use incremented PC\n    1 : valP;\n];"
}